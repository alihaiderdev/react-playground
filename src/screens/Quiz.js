import React, { useEffect, useState } from 'react';

const QuizData = [
  {
    question: 'Which language runs in a web browser?',
    type: 'radio',
    options: ['Java', 'C', 'Python', 'JavaScript'],
    correctAnswers: ['JavaScript'],
  },
  {
    question: 'What does CSS stand for?',
    type: 'radio',
    options: [
      'Central Style Sheets',
      'Cascading Style Sheets',
      'Cascading Simple Sheets',
      'Cars SUVs Sailboats',
    ],
    correctAnswers: ['Cascading Style Sheets'],
  },
  {
    question: 'What is hexa code of black color?',
    type: 'checkbox',
    options: ['#000', '#fff', '#000000', '#0f0f'],
    correctAnswers: ['#000', '#000000'],
  },
  {
    question: 'What is hexa code of white color?',
    type: 'checkbox',
    options: ['#000', '#fff', '#000000', '#ffffff'],
    correctAnswers: ['#fff', '#ffffff'],
  },
  {
    question: 'What does HTML stand for?',
    type: 'radio',
    options: [
      'Hypertext Markup Language',
      'Hypertext Markdown Language',
      'Hyperloop Machine Language',
      'Helicopters Terminals Motorboats Lamborginis',
    ],
    correctAnswers: ['Hypertext Markup Language'],
  },

  {
    question: 'What year was JavaScript launched?',
    type: 'radio',
    options: ['1996', '1995', '1994', 'none of the above'],
    correctAnswers: ['1995'],
  },
];

const Result = ({ score, totalScore, tryAgain }) => {
  //   const { resultMainDiv } = styles;
  return (
    <>
      <div className={'resultMainDiv'}>
        Total Score : {score} out of {totalScore}
      </div>
      <button onClick={tryAgain}>Reset All</button>
    </>
  );
};

const Quiz = () => {
  //   const router = useRouter();
  //   const { selecttest } = router.query;
  //   const {
  //     quizSection,
  //     extraTopInformation,
  //     option_container,
  //     questionDiv,
  //     buttonsDiv,
  //     selected,
  //   } = styles;

  const [questions, setQuestions] = useState(
    QuizData.map((q) => ({ ...q, selectedAnswers: [] }))
  );

  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState(0);
  const [showResult, setShowResult] = useState(false);

  console.log({ questions, currentQuestion: currentQuestion + 1, scores });

  useEffect(() => {
    let myInterval = setTimeout(() => {
      if (seconds > 0) {
        setSeconds(seconds - 1);
      }

      if (seconds === 0) {
        if (minutes === 0) {
          clearInterval(myInterval);
        } else {
          setMinutes(minutes - 1);
          setSeconds(59);
        }
      }
    }, 1000);
    if (minutes == 0 && seconds == 0) {
      setShowResult(true);
    }
    return () => {
      clearInterval(myInterval);
    };
  }, []);

  const previousQuestion = () => {
    if (currentQuestion >= 1) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const nextQuestion = () => {
    if (currentQuestion < QuizData.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      questions.map((q) => {
        if (
          q.correctAnswers.length === q.selectedAnswers.length &&
          q.correctAnswers.every((item) => q.selectedAnswers.includes(item))
        ) {
          setScores((prevScores) => prevScores + 1);
        }
      });
      setShowResult(true);
    }
  };

  const resetAll = () => {
    setShowResult(false);
    setCurrentQuestion(0);
    setScores(0);
    setQuestions(QuizData.map((q) => ({ ...q, selectedAnswers: [] })));
  };

  const { initialMinute = 0, initialSeconds = 59 } = 120;
  const [minutes, setMinutes] = useState(initialMinute);
  const [seconds, setSeconds] = useState(initialSeconds);

  const onRadioValueChangeHandler = (event) => {
    // console.log(event.target.value, 'event.target.value');
    questions[currentQuestion].selectedAnswers = [event.target.value];
    setQuestions([...questions]);
  };

  const onCheckboxValueChangeHandler = ({ target: { value, checked } }) => {
    let allChecked = questions[currentQuestion].selectedAnswers;
    // console.log({ value, checked, allChecked });
    if (checked) {
      allChecked = [...allChecked, value];
    } else {
      allChecked = allChecked.filter((item) => item !== value);
    }

    // console.log({ allChecked });
    questions[currentQuestion].selectedAnswers = allChecked;
    setQuestions([...questions]);
  };

  return (
    <>
      {/* <Head>
        <title>{selecttest}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.png' />
      </Head> */}
      <section className={'quizSection'}>
        {/* <h1>{selecttest}</h1> */}
        <div>
          {showResult ? (
            <Result
              score={scores}
              totalScore={QuizData.length}
              tryAgain={resetAll}
            />
          ) : (
            <>
              {/* <div className={'questionDiv'}>
                <div className={'extraTopInformation'}>
                  <p>
                    Timer:
                    {minutes === 0 && seconds === 0 ? null : (
                      <span>
                        {minutes}:{seconds < 10 ? `0${seconds}` : seconds}
                      </span>
                    )}
                  </p>
                  <p>
                    {currentQuestion + 1} / {QuizData.length}
                  </p>
                  <hr />
                </div>
                <span>{currentQuestion + 1}. </span>
                <span>{QuizData[currentQuestion].question}</span>
              </div>
              <div className={'option_container'}>
                {QuizData[currentQuestion].options.map((option, i) => {
                  return (
                    <label
                      htmlFor={option}
                      className={`option-btn ${
                        clickedOption == i + 1 ? 'selected' : null
                      }`}
                      key={i}
                      onClick={() => setClickedOption(i + 1)}
                    >
                      <input type='radio' name={'checkbox'} id={option} />
                      {option}
                    </label>
                  );
                })}

               
              </div> */}

              <span>
                {currentQuestion + 1} / {questions.length}{' '}
              </span>
              <h6>{questions[currentQuestion].question}</h6>
              <ul>
                {questions[currentQuestion]?.options.map((option, index) => {
                  return (
                    <li key={index}>
                      <label
                        htmlFor={option}
                        // className={`option-btn ${
                        //   clickedOption == index + 1 ? 'selected' : null
                        // }`}
                        // onClick={() => setClickedOption(index + 1)}
                      >
                        {questions[currentQuestion].type === 'radio' ? (
                          <input
                            type='radio'
                            id={option}
                            name={`question-${currentQuestion + 1}`}
                            value={option}
                            checked={
                              questions[currentQuestion].selectedAnswers[0] ===
                              option
                            }
                            onChange={onRadioValueChangeHandler}
                          />
                        ) : (
                          <input
                            type='checkbox'
                            id={option}
                            name={`question-${currentQuestion + 1}`}
                            value={option}
                            checked={questions[
                              currentQuestion
                            ].selectedAnswers.includes(option)}
                            onChange={onCheckboxValueChangeHandler}
                          />
                        )}
                        {option}
                      </label>
                    </li>
                  );
                })}
              </ul>
              <div className={'buttonsDiv'}>
                <input
                  type='button'
                  value='Previous'
                  onClick={previousQuestion}
                />
                <input
                  type='button'
                  value={
                    currentQuestion + 1 !== questions.length ? 'Next' : 'Submit'
                  }
                  onClick={nextQuestion}
                />
                {/* {currentQuestion + 1 !== questions.length ? (
                  <input type='button' value={'Next'} onClick={nextQuestion} />
                ) : (
                  <input
                    type='button'
                    value={'Submit'}
                    onClick={nextQuestion}
                  />
                )} */}
              </div>
            </>
          )}
        </div>
      </section>
    </>
  );
};
export default Quiz;
